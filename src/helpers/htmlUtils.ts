import MarkdownIt, { Renderer, Token } from "markdown-it";

/**
 * Creates a MarkdownIt container for spoilers for custom rendering.
 * @param md The MarkdownIt instance to extend with the spoiler functionality.
 * @param open A boolean indicating whether the spoiler should be open by default.
 * @returns An object containing the validate and render functions for the spoiler container.
 */
export function renderSpoiler(
  md: MarkdownIt,
  open: boolean
): {
  validate: (params: string) => RegExpExecArray | null;
  render: (tokens: any[], idx: number) => string;
} {
  return {
    validate: function (params: string) {
      return RegExp(/^spoiler\s+(.*)$/).exec(params.trim());
    },
    render: function (tokens: any[], idx: number) {
      const m = tokens[idx].info.trim().match(/^spoiler\s+(.*)$/);

      if (tokens[idx].nesting === 1) {
        // opening tag
        return (
          `<details class="spoiler-open" ${
            open ? "open" : ""
          }><summary class="spoiler-summary">` +
          md.utils.escapeHtml(m[1]) +
          "</summary>\n"
        );
      } else {
        // closing tag
        return "</details>\n";
      }
    },
  };
}

/**
 * Custom fence renderer for MarkdownIt to handle Mermaid diagrams.
 * @param tokens The array of tokens generated by MarkdownIt.
 * @param idx The index of the current token in the tokens array.
 * @param options The options used by MarkdownIt for rendering.
 * @param env The environment object that can be used to pass additional data.
 * @param self The renderer instance used to render the token.
 * @param defaultFence The default fence renderer function to fall back to for other languages.
 */
export function mermaidFence(
  tokens: Token[],
  idx: number,
  options: MarkdownIt.Options,
  env: any,
  self: Renderer,
  escapeHtml: (str: string) => string,
  defaultFence: (
    tokens: MarkdownIt.Token[],
    idx: number,
    options: MarkdownIt.Options,
    env: any,
    self: MarkdownIt.Renderer
  ) => string
): string {
  const token = tokens[idx];
  const lang = token.info.trim().split(/\s+/g)[0];
  const content = token.content;

  if (lang === "mermaid") {
    return `<div class="mermaid">${escapeHtml(content)}</div>\n`;
  }

  // Fallback to default MarkdownIt rendering (uses `highlight` if set)
  return defaultFence(tokens, idx, options, env, self);
}

export function anchorSlugify(s: string): string {
  return s
    .toLowerCase()
    .normalize("NFKD")
    .replace(/[\p{Emoji_Presentation}\p{Extended_Pictographic}]/gu, "") // Remove emojis
    .replace(/`/g, "") // Remove backticks
    .replace(/[^\w\s-]/g, "") // Remove other non-word chars
    .replace(/\s+/g, "-");
}

/**
 * Generates an HTML template for rendering Markdown content.
 * @param markdown The Markdown content to be rendered.
 * @param markdownIt The MarkdownIt instance used for rendering.
 * @param katexStylsheetLink The link to the KaTeX stylesheet.
 * @param mermaidScriptLink The link to the Mermaid script.
 * @param genericStylesheetPath The path to a generic stylesheet for styling the HTML output.
 * @return A string containing the complete HTML document with the rendered Markdown content.
 */
export function RenderHtmlTemplate(
  markdown: string,
  markdownIt: MarkdownIt,
  katexStylsheetLink: string,
  mermaidScriptLink: string,
  genericStylesheetPath: string
): string {
  const body = markdownIt.render(markdown);
  return `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Markdown PDF</title>
  <link rel="stylesheet" href="${katexStylsheetLink}">
  <style>
${genericStylesheetPath}
  </style>
  <link href="https://cdn.jsdelivr.net/npm/prismjs/themes/prism.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/prismjs/prism.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/prismjs/plugins/autoloader/prism-autoloader.js"></script>
  <script type="module">
    import mermaid from "${mermaidScriptLink}"
  </script>
</head>
<body>
${body}
</body>
</html>
`;
}
